name: Build + Test + Benchmark

on:
  push:
    branches:
      - main

env:
  CC: clang-18
  CXX: clang++-18

  REPO_DIR: ${{github.workspace}}/repo
  BUILD_DIR: ${{github.workspace}}/build

  LEADERBOARD: https://sigmod-contest-25.hpi-sci.de

  CURL_CMD: "curl -X POST --fail-with-body -F github_user=${{github.actor}} -F project_id=3 -F secret=${{secrets.HDP_SECRET}}"

  BM_RESULT_FILE: BENCHMARK_RUNTIME.txt


jobs:
  run_simple_checks:
    name: Build + Test + Benchmark

    strategy:
      fail-fast: false
      matrix:
        arch: [amd, arm, ibm, intel, amd2, arm2, ibm2, intel2]

    defaults:
      run:
        shell: bash

    runs-on: [self-hosted, sigmod, "${{ matrix.arch }}"]
    env:
      # We cannot obtain the runner name on some hosts. Use a fallback for now.
      FALLBACK_RUNNER_NAME: "sigmod-cp02-abcd"
    steps:
      - uses: actions/checkout@v3
        with:
          # Clones the repository to the subdir `repo`.
          path: repo

      - name: Copy Hardware Header
        run: cp $REPO_DIR/include/hardware__`hostname`.h $REPO_DIR/include/hardware.h

      - name: Create Build Environment
        run: cmake -E make_directory $BUILD_DIR

      - name: Configure CMake
        run: cmake -S $REPO_DIR -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=Release -Wno-dev -G Ninja

      - name: Build
        working-directory: ${{env.BUILD_DIR}}
        run: ninja

      - name: Run Unit Tests
        working-directory: ${{env.BUILD_DIR}}
        # Only allow test run of 30 seconds.
        run: |
          timeout 30 ./unit_tests
          EXIT_CODE=$?
          echo $CUSTOM_RUNNER_NAME
          $CURL_CMD -F result=$EXIT_CODE -F runner_name=${RUNNER_NAME:-$FALLBACK_RUNNER_NAME} -F arch=${{ matrix.arch }} -F labels=${{ runner.labels }} -F git_commit=${{github.sha}} $LEADERBOARD/deliver_basic
          exit $EXIT_CODE

      - name: Copy Evaluation Files
        working-directory: ${{env.REPO_DIR}}
        run: |
          unzip -o -P '${{secrets.SERVER_FILES_PW}}' /server_files.zip
          mv server_files/imdb .
          mv server_files/duckdb/imdb.db .

      - name: Run Query Plan Tests
        working-directory: ${{env.REPO_DIR}}
        # Only allow test run of 300 seconds. We selected a few fast plans.
        run: |
          timeout 180 ${{env.BUILD_DIR}}/run plans.json 1b 1c 3b 5a 5b 8b
          EXIT_CODE=$?
          $CURL_CMD -F result=$EXIT_CODE -F runner_name=${RUNNER_NAME:-$FALLBACK_RUNNER_NAME} -F arch=${{ matrix.arch }} -F labels=${{ runner.labels }} -F git_commit=${{github.sha}} $LEADERBOARD/deliver_advanced
          exit $EXIT_CODE

      - name: Run Evaluation
        working-directory: ${{env.REPO_DIR}}
        run: |
          numactl -m 0 -N 0 ${{env.BUILD_DIR}}/run plans.json $BM_RESULT_FILE
          EXIT_CODE=$?
          $CURL_CMD -F runtime=`cat $BM_RESULT_FILE` -F runner_name=${RUNNER_NAME:-$FALLBACK_RUNNER_NAME} -F arch=${{ matrix.arch }} -F labels=${{ runner.labels }} -F git_commit=${{github.sha}} $LEADERBOARD/deliver_full_benchmark
          exit $EXIT_CODE

      - name: Clean Up
        if: always()
        run: rm -rf $REPO_DIR $BUILD_DIR
